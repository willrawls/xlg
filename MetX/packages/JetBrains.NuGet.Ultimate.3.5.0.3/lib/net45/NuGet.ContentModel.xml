<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.ContentModel</name>
    </assembly>
    <members>
        <member name="T:NuGet.ContentModel.ContentPropertyDefinition">
            <summary>
            Defines a property that can be used in Content Model query patterns
            <seealso cref="T:NuGet.ContentModel.PatternSet" />
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.ContentPropertyDefinition.CompareTest">
            <summary>
            Find the nearest compatible candidate.
            </summary>
        </member>
        <member name="T:NuGet.ContentModel.PatternSet">
            <summary>
            A set of patterns that can be used to query a set of file paths for items matching a provided criteria.
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.GroupPatterns">
            <summary>
            Patterns used to select a group of items that matches the criteria
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.PathPatterns">
            <summary>
            Patterns used to select individual items that match the criteria
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.PropertyDefinitions">
            <summary>
            Property definitions used for matching patterns
            </summary>
        </member>
        <member name="T:NuGet.ContentModel.PatternDefinition">
            <summary>
            A pattern that can be used to match file paths given a provided criteria.
            </summary>
            <remarks>
            The pattern is defined as a sequence of literal path strings that must match exactly and property
            references,
            wrapped in {} characters, which are tested for compatibility with the consumer-provided criteria.
            <seealso cref="T:NuGet.ContentModel.ContentPropertyDefinition" />
            </remarks>
        </member>
        <member name="P:NuGet.ContentModel.PatternDefinition.Table">
            <summary>
            Replacement token table.
            </summary>
        </member>
        <member name="T:NuGet.ContentModel.PatternTable">
            <summary>
            Replacement token table organized by property.
            </summary>
        </member>
        <member name="M:NuGet.ContentModel.PatternTable.TryLookup(System.String,System.String,System.Object@)">
            <summary>
            Lookup a token and get the replacement if it exists.
            </summary>
            <param name="propertyName">Property moniker</param>
            <param name="name">Token name</param>
            <param name="value">Replacement value</param>
        </member>
        <member name="P:NuGet.ContentModel.PatternTableEntry.PropertyName">
            <summary>
            PropertyName moniker
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternTableEntry.Name">
            <summary>
            Item name
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternTableEntry.Value">
            <summary>
            Item replacement value
            </summary>
        </member>
        <member name="T:NuGet.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode(System.Object[])">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.Extensions.OrderedEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two enumberables for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
    </members>
</doc>
