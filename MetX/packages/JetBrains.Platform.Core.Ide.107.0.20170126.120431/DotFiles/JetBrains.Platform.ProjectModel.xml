<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.ProjectModel</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Assembly}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Assembly))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = ProjectModelThemedIcons.Assembly.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(ProjectModelThemedIcons.Assembly), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Assembly&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Assembly Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Assembly}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Assembly))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Assembly.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Assembly&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Assembly Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Assembly}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Assembly))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Assembly.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Assembly&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AssemblyReference Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+AssemblyReference}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.AssemblyReference))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.AssemblyReference.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.AssemblyReference&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AssemblyReference Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+AssemblyReference}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.AssemblyReference))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.AssemblyReference.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.AssemblyReference&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CppProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CppProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CppProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CppProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CppProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.CppProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CppProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CppProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CppProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CppProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CppProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CppProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.CppProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CppProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CsharpProj Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CsharpProj}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CsharpProj))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.CsharpProj.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CsharpProj&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CsharpProj Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CsharpProj}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CsharpProj))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.CsharpProj.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CsharpProj&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CsharpProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CsharpProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CsharpProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.CsharpProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CsharpProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CsharpProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CsharpProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CsharpProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.CsharpProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CsharpProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Directory Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Directory}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Directory))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Directory.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Directory&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Directory Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Directory}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Directory))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Directory.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Directory&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCore">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DotNetCore Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCore.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+DotNetCore}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.DotNetCore))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.DotNetCore.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.DotNetCore&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCore.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DotNetCore Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCore"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+DotNetCore}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.DotNetCore))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.DotNetCore.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.DotNetCore&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCoreProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DotNetCoreProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCoreProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+DotNetCoreProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.DotNetCoreProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.DotNetCoreProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.DotNetCoreProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCoreProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DotNetCoreProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCoreProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+DotNetCoreProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.DotNetCoreProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.DotNetCoreProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.DotNetCoreProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Folder Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Folder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Folder))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Folder.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Folder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Folder Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Folder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Folder))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Folder.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Folder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Fsharp">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Fsharp Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Fsharp.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Fsharp}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Fsharp))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Fsharp.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Fsharp&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Fsharp.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Fsharp Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Fsharp"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Fsharp}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Fsharp))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Fsharp.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Fsharp&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FsharpProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+FsharpProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.FsharpProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.FsharpProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.FsharpProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FsharpProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+FsharpProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.FsharpProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.FsharpProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.FsharpProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal">
             <summary>
              <para>
                <para>Autogenerated identifier class for the LayerSolutionPersonal Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+LayerSolutionPersonal}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.LayerSolutionPersonal))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.LayerSolutionPersonal.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.LayerSolutionPersonal&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the LayerSolutionPersonal Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+LayerSolutionPersonal}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.LayerSolutionPersonal))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.LayerSolutionPersonal.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.LayerSolutionPersonal&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared">
             <summary>
              <para>
                <para>Autogenerated identifier class for the LayerSolutionShared Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+LayerSolutionShared}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.LayerSolutionShared))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.LayerSolutionShared.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.LayerSolutionShared&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the LayerSolutionShared Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+LayerSolutionShared}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.LayerSolutionShared))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.LayerSolutionShared.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.LayerSolutionShared&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile">
             <summary>
              <para>
                <para>Autogenerated identifier class for the MissingFile Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+MissingFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.MissingFile))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.MissingFile.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.MissingFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the MissingFile Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+MissingFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.MissingFile))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.MissingFile.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.MissingFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder">
             <summary>
              <para>
                <para>Autogenerated identifier class for the MissingFolder Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+MissingFolder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.MissingFolder))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.MissingFolder.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.MissingFolder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the MissingFolder Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+MissingFolder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.MissingFolder))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.MissingFolder.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.MissingFolder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.NuGet">
             <summary>
              <para>
                <para>Autogenerated identifier class for the NuGet Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.NuGet.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+NuGet}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.NuGet))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.NuGet.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.NuGet&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.NuGet.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the NuGet Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.NuGet"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+NuGet}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.NuGet))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.NuGet.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.NuGet&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Project">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Project Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Project.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Project}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Project))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Project.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Project&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Project.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Project Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Project"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Project}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Project))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Project.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Project&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ProjectInProgress Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectInProgress}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectInProgress))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.ProjectInProgress.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectInProgress&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ProjectInProgress Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectInProgress}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectInProgress))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.ProjectInProgress.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectInProgress&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectProperties">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ProjectProperties Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectProperties.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectProperties}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectProperties))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.ProjectProperties.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectProperties&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectProperties.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ProjectProperties Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectProperties"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectProperties}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectProperties))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.ProjectProperties.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectProperties&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectPropertiesFile">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ProjectPropertiesFile Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectPropertiesFile.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectPropertiesFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectPropertiesFile))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.ProjectPropertiesFile.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectPropertiesFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectPropertiesFile.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ProjectPropertiesFile Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectPropertiesFile"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectPropertiesFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectPropertiesFile))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.ProjectPropertiesFile.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectPropertiesFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTarget">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ProjectTarget Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTarget.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectTarget}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectTarget))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.ProjectTarget.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectTarget&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTarget.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ProjectTarget Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTarget"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectTarget}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectTarget))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.ProjectTarget.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectTarget&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTargetFile">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ProjectTargetFile Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTargetFile.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectTargetFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectTargetFile))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.ProjectTargetFile.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectTargetFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTargetFile.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ProjectTargetFile Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTargetFile"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectTargetFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectTargetFile))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.ProjectTargetFile.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectTargetFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SdkModule Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SdkModule}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SdkModule))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.SdkModule.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SdkModule&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SdkModule Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SdkModule}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SdkModule))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.SdkModule.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SdkModule&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SharedProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SharedProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SharedProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SharedProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SharedProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.SharedProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SharedProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SharedProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SharedProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SharedProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SharedProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SharedProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.SharedProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SharedProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ShortcutOverlay">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ShortcutOverlay Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ShortcutOverlay.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ShortcutOverlay}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ShortcutOverlay))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.ShortcutOverlay.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ShortcutOverlay&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ShortcutOverlay.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ShortcutOverlay Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ShortcutOverlay"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ShortcutOverlay}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ShortcutOverlay))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.ShortcutOverlay.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ShortcutOverlay&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolutionFolder Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SolutionFolder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SolutionFolder))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.SolutionFolder.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SolutionFolder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolutionFolder Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SolutionFolder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SolutionFolder))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.SolutionFolder.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SolutionFolder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Unknown Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Unknown}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Unknown))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Unknown.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Unknown&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Unknown Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Unknown}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Unknown))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Unknown.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Unknown&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.UnloadedProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnloadedProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.UnloadedProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+UnloadedProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.UnloadedProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.UnloadedProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.UnloadedProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.UnloadedProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnloadedProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.UnloadedProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+UnloadedProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.UnloadedProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.UnloadedProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.UnloadedProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj">
             <summary>
              <para>
                <para>Autogenerated identifier class for the VbasicProj Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+VbasicProj}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.VbasicProj))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.VbasicProj.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.VbasicProj&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the VbasicProj Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+VbasicProj}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.VbasicProj))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.VbasicProj.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.VbasicProj&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the VbasicProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+VbasicProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.VbasicProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.VbasicProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.VbasicProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the VbasicProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+VbasicProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.VbasicProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.VbasicProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.VbasicProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectFileDataProvider`1">
            <summary>
            Data providers to build data   by project files (*.csproj etc)
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectFileDataProvider`2">
            <summary>
            Per-file cached data provider. Used with <see cref="T:JetBrains.ProjectModel.Caches.IProjectFileDataProviderCache`1"/>
            </summary>
            <typeparam name="TRaw">Type of raw data loaded from file to build TData</typeparam>
            <typeparam name="TData">Cached data type</typeparam>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectFileDataProvider">
            <summary>
            Marker interface for IProjectFileDataProvider
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProvider.CanHandle(JetBrains.Util.FileSystemPath)">
            <summary>
            Check if cache is applicable for certain file
            </summary>
            <param name="projectFileLocation">File location to check</param>
            <returns>Whether cache data should be built</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.Caches.IProjectFileDataProvider.Version">
            <summary>
            Provider version
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProvider`2.Read(JetBrains.Util.FileSystemPath,System.IO.BinaryReader)">
            <summary>
            Read data from cache. 
            </summary>
            <param name="projectFileLocation">Path to source file</param>
            <param name="reader">BinaryReader</param>
            <returns>Data read from cahce</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProvider`2.Write(JetBrains.Util.FileSystemPath,System.IO.BinaryWriter,`1)">
            <summary>
            Write data to cache
            </summary>
            <param name="projectFileLocation">Path to source file</param>
            <param name="writer">BinaryWriter</param>
            <param name="data">Data to store</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProvider`2.BuildData(JetBrains.Util.FileSystemPath,`0)">
            <summary>
            Build data from loaded document
            </summary>
            <param name="projectFileLocation">Project file location for which data is being built</param>
            <param name="document">Loaded document</param>
            <returns>Built data</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProvider`2.OnDataChanged(JetBrains.Util.FileSystemPath,`1,`1)">
            <summary>
            Callback when data is changed
            </summary>
            <param name="projectFileLocation">Project file location which data is changed</param>
            <param name="oldData">Old data, may be null</param>
            <param name="newData">New data, null if file removed</param>
            <returns>Action to ExecuteAfterChange</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectFileDataCache">
            <summary>
            Cache of date build for project files (*.cspro etc)
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectFileDataProviderCache`1">
            <summary>
            Cache of data built on certain files in project.
            </summary>
            <typeparam name="TRaw">Raw data type loaded from file</typeparam>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProviderCache`1.RegisterCache``1(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.Caches.IProjectFileDataProvider{`0,``0})">
            <summary>
            Provider registration. 
            </summary>
            <typeparam name="TData">Type of data returned by the provider</typeparam>
            <param name="cachelifetime">Provider lifetime</param>
            <param name="cache">Provider to register</param>
            <returns>Data loaded</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProviderCache`1.GetData``1(JetBrains.ProjectModel.Caches.IProjectFileDataProvider{`0,``0},JetBrains.Util.FileSystemPath,``0)">
            <summary>
            Get or create cached data
            </summary>
            <typeparam name="TData">Type of data returned</typeparam>
            <param name="cache">Data provider</param>
            <param name="projectFileLocation">Path to the file date should be obtained from</param>
            <param name="defaultValue">Default value returned if no file</param>
            <returns>Cached provider data</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectJsonDataProvider`1">
            <summary>
            Data provider to project.json file
            </summary>
            <typeparam name="TData">Data type</typeparam>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectJsonDataCache">
            <summary>
            Cache of date build for project.json
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.ISolutionCaches">
            <summary>
            Determined location of R# cache directory
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.SolutionCachesConfigurationExtensions.GetPersistentBoolProperty(JetBrains.ProjectModel.Caches.ISolutionCaches,JetBrains.DataFlow.Lifetime,System.String,JetBrains.Util.ILogger)">
            <summary>
            TODO: implement using single table.
            </summary>
            <param name="solutionCaches"></param>
            <param name="lifetime"></param>
            <param name="name"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ProjectModel.Caches.SolutionCaches.SolutionCachesVersion">
            <summary>
            Increase this number to force rebuild all caches
            How to change version:
            Increment number in prefix and write your branch version.
            E.g.
            27:wave04/winnie.solbuilderprototype
            28:wave04/branchfornavigation
            29:wave04/branchforcontinioustesting
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Transaction.IProjectModelBatchChange">
            <summary>
            Represents atomic operation on project model
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectOutputChange">
            <summary>
            Represents a relation between project and its output assembly (if exists)
            thrown by PM entities, this change is needed for PSI components to create/remove necessary/unnecessary psi modules
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFileType.Extensions">
            <summary>
            Do not use directly. Use IProjectFileExtensions.GetExtensions instead.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.KnownProjectFileType.Name">
            <summary>
            Specifies special ID for services, which has semantic "for any project file type"
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.DataContext.ProjectModelDataConstantsExtensions.ToProjectModelElementsDataConstant(JetBrains.ProjectModel.IProjectModelElement)">
            <summary>
            Returns the project model element as the project model elements data constant: a list of one non-Null item, or Null.
            Prevents getting collections with null elements inside.
            In other words, makes it valid for the data rule.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.DataContext.ProjectModelDataConstantsExtensions.ToProjectModelElementsDataConstant(JetBrains.ProjectModel.IProjectModelElement[])">
            <summary>
            Makes sure the project model elements collection does not contain Null items and is non-empty.
            Filters out Nulls, returns Null instead of empty collections.
            In other words, makes it valid for the data rule.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.DefaultSolutionToolset">
            <summary>
            Default impl for evrironments that don't care.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ISolutionToolset">
            <summary>
            Exposes MsBuild or XBuild that was used to open solution.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Tasks.ISolutionLoadTasksScheduler.ResetTime">
            <summary>
            Time statistics in tick counts
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Tasks.ISolutionLoadTasksScheduler.BeforeTaskExecuteSignal">
            <summary>
            Fires before task execution
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Assemblies.Interfaces.INugetPackageName">
            <summary>
            NuGet FQN
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Assemblies.Interfaces.INugetReferenceSpec">
            <summary>
            NuGet reference as specified in packages.config
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Assemblies.Interfaces.INugetPackageInfo">
            <summary>
            More verbose interface from COM model
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Assemblies.Interfaces.INugetPackage">
            <summary>
            Wrapper for IPackage from Nuget.Core.dll
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.FilesByMask.IFilesByMaskProvier.GetMasks(JetBrains.Util.FileSystemPath)">
            <summary>
            Gets file masks to include/ exclude files from build.
            May be called from any thread.
            </summary>
            <param name="projectFilePath">Path to project file (csproj/ xproj etc.)</param>
            <returns>File masks to include/ exclude files from buld</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.FilesByMask.IFilesByMaskProvier.MasksChanged">
            <summary>
            Fired when files masks for project file are changed. May be fired on any thread.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher">
            <summary>
            Functions for matching file names with patterns. 
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.FileMatcher.s_invalidPathChars">
            <summary>
            Cache of the list of invalid path characters, because this method returns a clone (for security reasons)
            which can cause significant transient allocations
            </summary>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.HasWildcards(System.String)">
            <summary>
            Determines whether the given path has any wild card characters.
            </summary>
            <param name="filespec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.HasWildcardsOrSemicolon(System.String)">
            <summary>
            Determines whether the given path has any wild card characters.
            </summary>
            <param name="filespec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.HasWildcardsSemicolonItemOrPropertyReferences(System.String)">
            <summary>
            Determines whether the given path has any wild card characters or any semicolons.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetAccessibleFileSystemEntries(Microsoft.Build.Shared.FileMatcher.FileSystemEntity,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get the files and\or folders specified by the given path and pattern.
            </summary>
            <param name="entityType">Whether Files, Directories or both.</param>
            <param name="path">The path to search.</param>
            <param name="pattern">The pattern to search.</param>
            <param name="projectDirectory">The directory for the project within which the call is made</param>
            <param name="stripProjectDirectory">If true the project directory should be stripped</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetAccessibleFilesAndDirectories(System.String,System.String)">
            <summary>
            Returns an array of file system entries matching the specified search criteria. Inaccessible or non-existent file
            system entries are skipped.
            </summary>
            <param name="path"></param>
            <param name="pattern"></param>
            <returns>Array of matching file system entries (can be empty).</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetAccessibleFiles(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Same as Directory.GetFiles(...) except that files that
            aren't accessible are skipped instead of throwing an exception.
            
            Other exceptions are passed through.
            </summary>
            <param name="path">The path.</param>
            <param name="filespec">The pattern.</param>
            <param name="projectDirectory">The project directory</param>
            <param name="stripProjectDirectory"></param>
            <returns>Files that can be accessed.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetAccessibleDirectories(System.String,System.String)">
            <summary>
            Same as Directory.GetDirectories(...) except that files that
            aren't accessible are skipped instead of throwing an exception.
            
            Other exceptions are passed through.
            </summary>
            <param name="path">The path.</param>
            <param name="pattern">Pattern to match</param>
            <returns>Accessible directories.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetLongPathName(System.String)">
            <summary>
            Given a path name, get its long version.
            </summary>
            <param name="path">The short path.</param>
            <returns>The long path.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetLongPathName(System.String,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a path name, get its long version.
            </summary>
            <param name="path">The short path.</param>
            <param name="getFileSystemEntries">Delegate.</param>
            <returns>The long path.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.SplitFileSpec(System.String,System.String@,System.String@,System.String@,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a filespec, split it into left-most 'fixed' dir part, middle 'wildcard' dir part, and filename part.
            The filename part may have wildcard characters in it.
            </summary>
            <param name="filespec">The filespec to be decomposed.</param>
            <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
            <param name="wildcardDirectoryPart">The wildcard directory part.</param>
            <param name="filenamePart">The filename part.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.PreprocessFileSpecForSplitting(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Do most of the grunt work of splitting the filespec into parts.
            Does not handle post-processing common to the different matching
            paths.
            </summary>
            <param name="filespec">The filespec to be decomposed.</param>
            <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
            <param name="wildcardDirectoryPart">The wildcard directory part.</param>
            <param name="filenamePart">The filename part.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.RemoveInitialDotSlash(System.String[])">
            <summary>
            Removes the leading ".\" from all of the paths in the array. 
            </summary>
            <param name="paths">Paths to remove .\ from.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.IsDirectorySeparator(System.Char)">
            <summary>
            Checks if the char is a DirectorySeparatorChar or a AltDirectorySeparatorChar
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.RemoveProjectDirectory(System.String[],System.String)">
            <summary>
            Removes the current directory converting the file back to relative path 
            </summary>
            <param name="paths">Paths to remove current directory from.</param>
            <param name="projectDirectory"></param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetFilesRecursive(System.Collections.IList,System.String,System.String,System.String,System.Int32,System.Text.RegularExpressions.Regex,System.Boolean,System.String,System.Boolean,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Get all files that match either the file-spec or the regular expression. 
            </summary>
            <param name="listOfFiles">List of files that gets populated.</param>
            <param name="baseDirectory">The path to enumerate</param>
            <param name="remainingWildcardDirectory">The remaining, wildcard part of the directory.</param>
            <param name="filespec">The filespec.</param>
            <param name="extensionLengthToEnforce"></param>
            <param name="regexFileMatch">Wild-card matching.</param>
            <param name="needsRecursion">If true, then recursion is required.</param>
            <param name="projectDirectory"></param>
            <param name="stripProjectDirectory"></param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.RegularExpressionFromFileSpec(System.String,System.String,System.String,System.Boolean@)">
            <summary>
            Given a file spec, create a regular expression that will match that
            file spec.
            
            PERF WARNING: this method is called in performance-critical
            scenarios, so keep it fast and cheap
            </summary>
            <param name="fixedDirectoryPart">The fixed directory part.</param>
            <param name="wildcardDirectoryPart">The wildcard directory part.</param>
            <param name="filenamePart">The filename part.</param>
            <param name="isLegalFileSpec">Receives whether this pattern is legal or not.</param>
            <returns>The regular expression string.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetFileSpecInfo(System.String,System.Text.RegularExpressions.Regex@,System.Boolean@,System.Boolean@,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a filespec, get the information needed for file matching. 
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="regexFileMatch">Receives the regular expression.</param>
            <param name="needsRecursion">Receives the flag that is true if recursion is required.</param>
            <param name="isLegalFileSpec">Receives the flag that is true if the filespec is legal.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetFileSpecInfo(System.String,System.String@,System.String@,System.String@,System.String@,System.Boolean@,System.Boolean@,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a filespec, get the information needed for file matching.
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
            <param name="wildcardDirectoryPart">Receives the wildcard directory part.</param>
            <param name="filenamePart">Receives the filename part.</param>
            <param name="matchFileExpression">Receives the regular expression.</param>
            <param name="needsRecursion">Receives the flag that is true if recursion is required.</param>
            <param name="isLegalFileSpec">Receives the flag that is true if the filespec is legal.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.FileMatch(System.String,System.String)">
            <summary>
            Given a pattern (filespec) and a candidate filename (fileToMatch)
            return matching information.
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="fileToMatch">The candidate to match against.</param>
            <returns>The result class.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetFiles(System.String,System.String)">
            <summary>
            Given a filespec, find the files that match. 
            Will never throw IO exceptions: if there is no match, returns the input verbatim.
            </summary>
            <param name="projectDirectoryUnescaped">The project directory.</param>
            <param name="filespecUnescaped">Get files that match the given file spec.</param>
            <returns>The array of files.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.GetFiles(System.String,System.String,Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries,Microsoft.Build.Shared.DirectoryExists)">
            <summary>
            Given a filespec, find the files that match. 
            Will never throw IO exceptions: if there is no match, returns the input verbatim.
            </summary>
            <param name="projectDirectoryUnescaped">The project directory.</param>
            <param name="filespecUnescaped">Get files that match the given file spec.</param>
            <param name="getFileSystemEntries">Get files that match the given file spec.</param>
            <param name="directoryExists">Determine whether a directory exists.</param>
            <returns>The array of files.</returns>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher.FileSystemEntity">
            <summary>
            The type of entity that GetFileSystemEntries should return.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher.GetFileSystemEntries">
            <summary>
            Delegate defines the GetFileSystemEntries signature that GetLongPathName uses
            to enumerate directories on the file system.
            </summary>
            <param name="entityType">Files, Directories, or Files and Directories</param>
            <param name="path">The path to search.</param>
            <param name="pattern">The file pattern.</param>
            <param name="projectDirectory"></param>
            <param name="stripProjectDirectory"></param>
            <returns>The array of filesystem entries.</returns>
        </member>
        <member name="T:Microsoft.Build.Shared.FileMatcher.Result">
            <summary>
            The results of a match between a filespec and a file name.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Shared.FileMatcher.Result.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ExtraData.IMsBuildDataProvider">
            <summary>
            This is a marking interface for entities that provide data
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildData.ReferencedAssemblies">
            <summary>
            Assembly references
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildData.ReferencedProjects">
            <summary>
            Project references
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildData.CompileItems">
            <summary>
            Compile items. TODO: refactor to map FileSystemPath -> BuildAction
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildData.ExcludedItems">
            <summary>
            Files excluded from compilation. I.e. by exclude in .csproj or project.json
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage">
            <summary>
            Storage of compile items and references that may not be available via Visual Studio API
            The items are used to create additional references and PsiSourceFiles to make sure there is no red code in solution
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.TryGetData(JetBrains.Util.FileSystemPath)">
            <summary>
            Get data if exists for the project file path
            </summary>
            <param name="projectFilePath">Path to the project file of the project in questiuon</param>
            <returns>Data if created</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.PerformBulkChange(JetBrains.DataFlow.Lifetime)">
            <summary>
            Temporary suppresses firing changes until all the changes are made
            </summary>
            <param name="lifetime">Suppression lifetime</param>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.SetData(JetBrains.ProjectModel.ExtraData.IMsBuildDataProvider,JetBrains.Util.FileSystemPath,JetBrains.ProjectModel.ExtraData.IMsBuildData)">
            <summary>
            Sets new provider data
            </summary>
            <param name="provider">Data provider</param>
            <param name="projectFilePath">Path to the project file</param>
            <param name="data">Data itself</param>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.Clear(JetBrains.ProjectModel.ExtraData.IMsBuildDataProvider)">
            <summary>
            Clears all the provider data
            </summary>
            <param name="provider">Data provider</param>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.Clear(JetBrains.ProjectModel.ExtraData.IMsBuildDataProvider,System.Func{JetBrains.Util.FileSystemPath,System.Boolean})">
            <summary>
            Clears provider data that matches <see cref="!:filter"/>
            </summary>
            <param name="provider">Data provider</param>
            <param name="filter">Project file path filter</param>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.Changed">
            <summary>
            Fired when data corresponding to certain project file paths has changed
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Packages.NuGetRunningState.IsNugetRunning">
            <summary>
            True when NuGet is definitely operationg (between installing/ installed and uninstalling/ uninstalled)
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Packages.NuGetSolutionManager.GetContentFiles(JetBrains.ProjectModel.IProject)">
            <remarks>Relative paths to project's root</remarks>
        </member>
        <member name="F:JetBrains.ProjectModel.Packages.NuGetSolutionManager.ourPpExtension">
            <summary>
            https://docs.nuget.org/create/configuration-file-and-source-code-transformations#user-content-specifying-source-code-transformations
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Packages.RepositorySettings">
            <summary>
            Analog of <c>NuGet.VisualStudio.RepositorySettings</c>
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Packages.RepositorySettings.GetConfigurationPath(JetBrains.Util.FileSystemPath)">
            <summary>
            Returns the configuraton path by walking the directory structure to find a nuget.config file.
            </summary>
            <param name="solutionFilePath"></param>
        </member>
        <member name="M:JetBrains.ProjectModel.Packages.RepositorySettings.GetRepositoryPathFromConfig(JetBrains.Util.FileSystemPath)">
            <summary>
            Extracts the repository path from a nuget.config settings file
            </summary>
            <param name="path">Full path to the nuget.config file</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Packages.RepositorySettings.GetConfigurationFiles(JetBrains.Util.FileSystemPath)">
            <summary>
            Returns the list of candidates for nuget config files.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Packages.SharedPackageRepositoryInTemp.SearchPackages">
            <summary>
            Search for either .nupkg-based or .nuspec-based packages
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectImplementation.DefaultTargetFrameworkOverriderByProjectJson">
            <summary>
            Crutch for RSRP-459579 when .csproj is in fact a PCL that targets platform definied in project.json file
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectImplementation.DefaultTargetFrameworkOverriderByProjectJson.GetOverridenTargetFrameworkId(JetBrains.ProjectModel.IProject)">
            <summary>
            Returns overriden <see cref="T:JetBrains.Metadata.Reader.API.TargetFrameworkId"/> if the <see cref="!:project"/> has the only <see cref="F:JetBrains.Metadata.Reader.API.TargetFrameworkId.Default"/> and it is overriden in project.json
            Null otherwise.
            </summary>
            <param name="project">Project in question</param>
            <returns>Returns overriden <see cref="T:JetBrains.Metadata.Reader.API.TargetFrameworkId"/> if the <see cref="!:project"/> has the only <see cref="F:JetBrains.Metadata.Reader.API.TargetFrameworkId.Default"/> and it is overriden in project.json
            Null otherwise.</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectImplementation.DefaultTargetFrameworkOverriderByProjectJson.GetTargetFrameworkId(JetBrains.Util.FileSystemPath,JetBrains.Application.platforms.PlatformID)">
            <summary>
            Returns overriden <see cref="T:JetBrains.Metadata.Reader.API.TargetFrameworkId"/> if it is overriden in project.json
            Null otherwise.
            </summary>
            <param name="projectFilePath">Project file location</param>
            <param name="platformID">Project platfrom identifier</param>
            <returns>Returns overriden <see cref="T:JetBrains.Metadata.Reader.API.TargetFrameworkId"/> if it is overriden in project.json
            Null otherwise.</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectImplementation.DefaultTargetFrameworkOverriderByProjectJson.GetRawTargetFrameworkId(JetBrains.ProjectModel.IProject,JetBrains.Metadata.Reader.API.TargetFrameworkId)">
            <summary>
            Returns <see cref="F:JetBrains.Metadata.Reader.API.TargetFrameworkId.Default"/> if <see cref="!:targetFrameworkId"/> is the overriden one. 
            Returns <see cref="!:targetFrameworkId"/> otherwise.
            </summary>
            <param name="project">Project in question</param>
            <param name="targetFrameworkId">TargetFrameworkId to convert</param>
            <returns>Returns <see cref="F:JetBrains.Metadata.Reader.API.TargetFrameworkId.Default"/> if <see cref="!:targetFrameworkId"/> is the overriden one. 
            Returns <see cref="!:targetFrameworkId"/> otherwise.</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectImplementation.TargetFrameworkIdInProjectFile.GetTargetFrameworkIds(JetBrains.Util.FileSystemPath)">
            <summary>
            Returns TargetFrameworkIds from project file
            </summary>
            <param name="projectFilePath">Project file location</param>
            <returns>TargetFrameorksIds mentioned in TargetFrameworkId or TargetFrameworksIds element</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectImplementation.TargetFrameworkIdInProjectFile.GetTargetFrameworkIds(JetBrains.ProjectModel.IProject)">
            <summary>
            Returns TargetFrameworkIds from project file
            </summary>
            <param name="project">Valid project</param>
            <returns>TargetFrameorksIds mentioned in TargetFrameworkId or TargetFrameworksIds element</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectImplementation.TargetFrameworkIdInProjectFile.Instance">
            <summary>
            Hack for project properties factory
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectProperties.UpdateFrom(JetBrains.ProjectModel.Properties.IProjectProperties)">
            <summary>
            Tries updating values from <seealso cref="!:properties"/> if possible
            </summary>
            <param name="properties">Other properties</param>
            <returns>true if values updated, false otherwise</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.IProjectPropertiesRequest">
            <summary>
            Requires 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectElement">
            <summary>
            Root interface for all objects associated with a project
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectModelElement">
            <summary>
            Handy root interface for all object of ProjectModel
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElement.GetProperty(JetBrains.Util.Key)">
            <summary>
            Retrieves the value of a property given the property's name
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElement.IsValid">
            <summary>
            Returns true if the project item is a member of a valid solution hierarchy.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectElement.GetProject">
            <summary>
            Gets the project that owns this project element.
            On an <see cref="T:JetBrains.ProjectModel.IProject"/>, returns self.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectElement.GetPersistentID">
            <summary>
            Returns persistent ID of the project element. This ID remains valid between sessions,
            but does not survive after renaming or moving the element.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectToPackageReference.TargetFrameworkId">
            <summary>
            Framework id for DNX projects if depenendency is framework specific. 
            Otherwise always null.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Resolver.NugetPackageResolver.OnPackageRemoved">
            <summary>
            todo: better way to cache invalidation?
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.WellKnownFoldersTracker">
            <summary>
            Advices FileSystemTracker on some well known folders in order to merge subsequent FileSystemTracker jobs
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Configuration.SolutionSettingsComponent.GetSettingsDocument(JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Looks for either the current or legacy solution settings.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Configuration.SolutionSettingsComponent.GetSettingsDocument_LegacyVersion(JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Looks for the solution settings from the previous version of R#.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IFileExtensionMapping.GetFileTypes(System.String)">
            <summary>
            Do not use directly. Use <see cref="M:JetBrains.ProjectModel.IProjectFileExtensions.GetFileType(System.String)"/> instead.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IFileExtensionMapping.GetExtensions(JetBrains.ProjectModel.ProjectFileType)">
            <summary>
            Do not use directly. Use <see cref="M:JetBrains.ProjectModel.IProjectFileExtensions.GetExtensions(JetBrains.ProjectModel.ProjectFileType)"/> instead.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IFileExtensionMapping.Changed">
            <summary>
            When fired cached values must be changed
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFileExtensions.GetFileType(System.String)">
            <summary>
            Returns project file type associated with the extension
            </summary>
            <param name="extension">Project file extension with dot</param>
            <returns>Project file type associated with the extension</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFileExtensions.GetExtensions(JetBrains.ProjectModel.ProjectFileType)">
            <summary>
            Returns all extensions associated with project file type
            </summary>
            <param name="fileType">Project file type</param>
            <returns>All extensions associated with project file type</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFileExtensions.Changed">
            <summary>
            Fired when there's a change in extensions to project file type association
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ISolutionOwner.GetComponent``1">
            <summary>
            Get component from the owner (e.g Shell) container.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISolutionOwner.IsRealSolutionOwner">
            <summary>
            Hack to overcome a problem with toolwindows created for a fake solution in options
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectConfiguration.SetProject(JetBrains.ProjectModel.IProject)">
            <summary>
            This method is called after project is completely initialized. It is called with project = null before project is closed.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectConfiguration.UpdateFrom(JetBrains.ProjectModel.Properties.IProjectConfiguration)">
            <summary>
            Tries updating values from <seealso cref="!:configuration"/> if posiible
            </summary>
            <param name="configuration">Other settings</param>
            <returns>true if values updated, false otherwise</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.Name">
            <summary>
            Debug, Release or some custom...
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.TargetFrameworkId">
            <summary>
            TargetFramework the configuration corresponds to
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.RelativeOutputDirectory">
            <summary>
            bin/debug or something like this...
            Make sure the value assigned represents relative path. If in doubt use <see cref="M:JetBrains.ProjectModel.Properties.ProjectConfigurationEx.SetRelativeOutputDirectory(JetBrains.ProjectModel.Properties.IProjectConfiguration,System.String,JetBrains.Util.FileSystemPath)"/>
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IQuerySolutionCloseHandler.QuerySolutionClose(JetBrains.ProjectModel.ISolution)">
            <summary>
            Implementation returns false when solution can not be closed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectItemBase">
            <summary>
            Base class for project item implementations
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectItem">
            <remarks>
            Interface to a project item. Project item is a member of a project's hierarchy
            </remarks>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectItem.GetPresentableProjectPath">
            <summary>
            Returns project path as a string containing names of the project items from the root to the item delimited by “<c>\</c>”.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectItem.ParentFolder">
            <summary>
            Parent item for the item.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectItem.Location">
            <summary>
            Location of the file associated with the item.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectItem.Kind">
            <summary>
            Returns the type of the project item.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectItem.IsLinked">
            <summary>
            Returns true if the project item is linked to its parent folder. This means that the persistent version
            of the item is not located in the persistent version of the parent folder.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectItemBase.DoRename(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectFolder">
            <summary>
            Represents a folder in a project
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.FindProjectItemByLocation(JetBrains.Util.FileSystemPath)">
            <summary>
            Returns random project item inside given folder at the given location.
            Use the method if and only if you're 100% sure there's only one project item expected. 
            Use <see cref="M:JetBrains.ProjectModel.ProjectFolderEx.FindProjectItemsByLocation(JetBrains.ProjectModel.IProjectFolder,JetBrains.Util.FileSystemPath)"/> otherwise.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.GetSubItem(System.String)">
            <summary>
            Returns any sub item given the name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.GetSubItems(System.String)">
            <summary>
            Returns all sub items item given the name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.GetSubItems">
            <summary>
            Subitems of the item.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.GetSubFolderByPath(JetBrains.ProjectModel.ProjectFolderPath)">
            <summary>
            Returns a sub folder given the project folder path.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFolder.Path">
            <summary>
            Path for regular project folder or virtual project folder (which is has alias and abolute location)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFolderImpl.Path">
            <summary>
            This path should be null for projects and solution folders.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ISdkModule">
            <summary>
            Incapsulates Sdk Module with sdk content files but not with sdk content assemblies
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProject">
            <remarks>Interface to a project</remarks>
        </member>
        <member name="T:JetBrains.ProjectModel.IModule">
            <summary>
            Common interface for <see cref="T:JetBrains.ProjectModel.IProject"/> and <see cref="T:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IModule.PlatformID">
            <summary>
            The platform to which the module is targeted. For real project is never null.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProject.GetModuleReferences(JetBrains.Metadata.Reader.API.TargetFrameworkId)">
            <summary>
            All assembly and project references
            </summary>
            <param name="targetFrameworkId"></param>
        </member>
        <member name="P:JetBrains.ProjectModel.IProject.TargetFrameworkIds">
            <summary>
            Ids of the target framework the project is targeting.
            Normally the enumerable consists of just one element,
            but in case of ASP.NET 5.0 there may be many (at least normal framework and Core)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProject.ProjectFile">
            <summary>
            Returns project item representing the project file.
            Can be <c>Null</c> for the misc items project.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISdkModule.ContentRootFolder">
            <summary>
            A path to the contents of sdk module. I.e. for windows sdk it is "...\Windows Kits\8.0\References\CommonConfiguration\Neutral"
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISdkModule.TargetPlatformData">
            <summary>
            describes the hardware platfrom current module is applicable to
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectModelZone">
            <summary>
            Solutions/Projects support. Mostly modeled to façade the Visual Studio IVsHierarchy solution/project model, but has standalone implementations to match in standalone IDEs and cmdline tools.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.CSharp.TypeScriptProjectPropertiesRequest">
            <summary>
            This component is located here to test it in platform environment...
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.PchOption">
            <summary>
            Corresponds to <see cref="!:Microsoft.VisualStudio.VCProjectEngine.pchOption"/> 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.RuntimeCheckOption">
            <summary>
            Corresponds to <see cref="!:Microsoft.VisualStudio.VCProjectEngine.basicRuntimeCheckOption"/> 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.RuntimeLibraryOption">
            <summary>
            Corresponds to <see cref="!:Microsoft.VisualStudio.VCProjectEngine.runtimeLibraryOption"/> 
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.model2.Assemblies.Interfaces.IAssemblyFactory.AddRef(JetBrains.Util.FileSystemPath,System.String,JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext)">
            <summary>
            Adds assembly to assembly collection
            </summary>
            <param name="assemblyPath"></param>
            <param name="holderId">Caller ID</param>
            <param name="moduleReferenceResolveContext"> </param>
        </member>
        <member name="M:JetBrains.ProjectModel.Assemblies.Impl.AssemblyFactory.AddRef(JetBrains.Util.FileSystemPath,System.String,JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext)">
            <summary>
            Gets or creates assembly file + adds an assembly cookie to be used by clients
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Assemblies.Impl.ModuleReferencesResolveStore.GetAssemblyFileResolveResult(JetBrains.ProjectModel.Model2.References.IModuleToAssemblyReference)">
            <summary>
            Gets cached (and only cached!) value to track changes in assembly model
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Assemblies.Impl.ModuleReferencesResolveStore.GetReferencesToProject(JetBrains.ProjectModel.IProject)">
            <param name="target"></param>
        </member>
        <member name="T:JetBrains.ProjectModel.Build.ProjectBuildSettingsInit">
            <summary>
            Enable build settings change events after all project is initialized.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.GetAssemblyReferences(JetBrains.ProjectModel.IProject,JetBrains.Metadata.Reader.API.TargetFrameworkId)">
            <summary>All assemblies referenced in the project</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.GetProjectReferences(JetBrains.ProjectModel.IProject,JetBrains.Metadata.Reader.API.TargetFrameworkId)">
            <summary>All projects referenced in the project</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.GetModuleReference(JetBrains.ProjectModel.IProject,System.String)">
            <summary>Retrieves module reference by the module name</summary>
            <remarks>
            It is assumed that the name uniquely identifies the module among
            referenced modules (both projects and assemblies)
            For projects use ProjectReferenceExtension.GetReferencedName
            </remarks>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectItemExtensions.IsShared(JetBrains.ProjectModel.IProjectFile)">
            <summary>Checks if there are any files sharing the same location.</summary>
            <param name="projectFile">Any project file</param>
            <returns>True if there are files having the same location</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectItemExtensions.GetSharedProjectFiles(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Returns list of project files sharing the same location including the argument.
            </summary>
            <param name="projectFile">Any project file</param>
            <returns>List of project files sharing the same location including the argument.</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.IBuildSettings">
            <summary>
            Common build settings for all projects
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IBuildSettings.UpdateFrom(JetBrains.ProjectModel.Properties.IBuildSettings)">
            <summary>
            Tries updating values from <seealso cref="!:settings"/> if posiible
            </summary>
            <param name="settings">Other settings</param>
            <returns>true if values updated, false otherwise</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.Managed.IManagedProjectBuildSettings.OutputAssemblyName">
            <summary>
            Output assembly short name without extension
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.Managed.IManagedProjectBuildSettings.OutputAssemblyFileName">
            <summary>
            Output assembly short name with extension
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.JavaScriptMetroStyle.JavaScriptMetroProjectPropertiesFactory.CreateJavaScriptMetroProjectProperties(JetBrains.Application.platforms.PlatformID,System.Collections.Generic.ICollection{System.Guid},JetBrains.Metadata.Utils.TargetPlatformData)">
            <param name="platformIdVs">platfrom id obtained from VS</param>
            <param name="flavours"> </param>
            <param name="targetPlatformData"> </param>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.ConfigurationTypes">
            <summary>
            Corresponds to <see cref="!:Microsoft.VisualStudio.VCProjectEngine.ConfigurationTypes"/>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.CppExceptionHandling">
            <summary>
            Corresponds to <see cref="!:Microsoft.VisualStudio.VCProjectEngine.cppExceptionHandling"/> 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.TargetMachine">
            <summary>
            Corresponds to <see cref="!:Microsoft.VisualStudio.VCProjectEngine.machineTypeOption"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.VCXProj.VCCompilerToolProperties.AdditionalOptions">
            <summary>
            Options added to the end of the command line immediately before the file name(s)
            </summary>    
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.VCXProj.VCCompilerToolProperties.ForcedIncludeFiles">
            <summary>
            This option has the same effect as specifying the file with double quotation marks in an #include directive on the first line of every source file specified on the command line, in the CL environment variable, or in a command file. If you use multiple /FI options, files are included in the order they are processed by CL.
            http://msdn.microsoft.com/en-us/library/vstudio/8c5ztk84.aspx
            </summary>    
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.VCXProj.VCCompilerToolProperties.FullIncludePath">
            <summary>
            List of all directories included in the build; a concatenation of directories specified with /I and the directories specified in the VC++ Directories, Projects and Solutions, Options Dialog Box dialog box. Macros present in these directories will be evaluated as well.
            </summary>    
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.VCXProj.VCCompilerToolProperties.PreprocessorDefinitions">
            <summary>
            Gets or sets one or more preprocessor defines. <see cref="P:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.PreprocessorDefinitions"/> exposes the functionality of the compiler's /D (Preprocessor Definitions) option, the MIDL compiler's MIDL Property Pages: General option, and the Resource Compiler's Resources Property Pages option.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.VCXCompileAsManagedOptions">
            <summary>
            Corresponds to <see cref="!:Microsoft.VisualStudio.VCProjectEngine.compileAsManagedOptions"/> 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.VCXCompileAsOptions">
            <summary>
            Corresponds to <see cref="!:Microsoft.VisualStudio.VCProjectEngine.CompileAsOptions"/> 
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.References.AssemblyReferenceTarget.#ctor(JetBrains.Metadata.Utils.AssemblyNameInfo,JetBrains.Util.FileSystemPath)">
            <summary>
            Project model reference target
            </summary>
            <param name="assemblyName">Target assembly name</param>
            <param name="hintLocation">Hint location. Should be null for assembly-to-assembly reference</param>
        </member>
        <member name="M:JetBrains.ProjectModel.References.Impl.SdkReferenceImpl.#ctor(JetBrains.ProjectModel.IProject,System.Collections.Generic.ICollection{JetBrains.ProjectModel.IProjectToAssemblyReference},JetBrains.ProjectModel.Update.SdkReferences.SdkReferenceInfo,JetBrains.Metadata.Reader.API.TargetFrameworkId)">
            <summary>
            Don't use this ctor directly. Use SdkReferenceFactory instead!
            </summary>
            <param name="project"></param>
            <param name="nestedAssemblyReferences"></param>
            <param name="sdkReferenceInfo"></param>
            <param name="targetFrameworkId"></param>
        </member>
        <member name="T:JetBrains.ProjectModel.model2.References.ReferencesFolder">
            <summary>
            Data class that represents references folder in solution explorer
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.References.SdkModuleUtil.IsMetroStyleSdk(JetBrains.ProjectModel.ISdkModule)">
            <summary>
            does not passes for all 'windows' platform sdk modules. Supposingly will return true for all markup sdks like WinJS
            </summary>
            <param name="sdkModule"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler.IsWritable(JetBrains.ProjectModel.ISolution)">
            <summary>
            Indicates that the structure of the solution, the properties of the solution
            and the properties of the solution items can be modifed
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler.IsWritable(JetBrains.ProjectModel.IProject)">
            <summary>
            Indicates whether the structure of the project or properties of its items can be modified
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler.IsWritable(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Checks if the persistent version of the file is writable
            </summary>
        </member>
        <member name="E:JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler.MakingWritable">
            <summary>
            Raised when files are needed to make writable.
            The handlers of this event must ensure that the documents are really writable.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectFolderPath">
            <summary>
            Path for regular project folder or virtual project folder (which is has alias and abolute location)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFolderPath.ShortName">
            <summary>
            Which is regular folder name or alias for virtual folder.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFolderPath.ReferencedFolderPath">
            <summary>
            Absolute path to virtual folder or Empty
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFolderPath.AllowsNonExistence">
            <summary>
            Means that a folder can absent in file system (can be a virtual folder)
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFilePath.#ctor(JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath)">
            <summary>
            Combined isLinked...
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.SolutionInstance.TerminateOnCloseLifetime">
            <summary>
            Special lifetime that designates that solution is about to terminate, but no components are disposed yet.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ISolutionExplorer.ShowInSolutionExplorer(JetBrains.ProjectModel.IProjectItem,System.Boolean)">
            <summary>
            Shows the Solution Explorer and sets selection to <paramref name="projectItem"/>, if defined.
            </summary>
            <param name="projectItem">A valid project item to select in Solution Explorer, or <c>Null</c> to just activate the Solution Explorer window (if <paramref name="activate"/>).</param>
            <param name="activate">Whether to activate the Solution Explorer window.</param>
            <returns>Success flag.</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitorEx.VisitDeltasRecursively(JetBrains.ProjectModel.ProjectModelChange,System.Action{JetBrains.ProjectModel.ProjectModelChange})">
            <summary>
            Runs the change thru <see cref="T:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor"/>, and for each of its <see cref="M:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor.VisitDelta(JetBrains.ProjectModel.ProjectModelChange)"/>, calls the given functor.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitorEx.VisitItemDeltasRecursively(JetBrains.ProjectModel.ProjectModelChange,System.Action{JetBrains.ProjectModel.ProjectItemChange})">
            <summary>
            Runs the change thru <see cref="T:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor"/>, and for each of its <see cref="M:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor.VisitItemDelta(JetBrains.ProjectModel.ProjectItemChange)"/>, calls the given functor.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFileData.LastWriteTimeUtc">
            <summary>
            Time of last modification of the corresponding file on the file system.
            Note that this value is cached and is updated only when the synchronization with the file system is performed.
            That is, the value returned by this method may sometimes differ from the actual modification stamp of the physical file,
            if the file was modified since last synchronization with the file system.
            </summary>    
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Schema.BuildSettings">
            <summary>
            <para>Project Model :: Build.</para>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SolutionSettingsStorageBase">
            <summary>
            Base for two per-solution storages.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SettingsStorageProviderBaseInChildContainer">
            <summary>
            If we register a component in a child container, its exposed interfaces won't be available to the shell-level container. This class helps with solving the problem for project model containers by exposing the stuff on behalf of the <see cref="T:JetBrains.Application.Settings.Storage.SettingsStorageProvidersCollection"/> shell-level component.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Schema.HierarchySettings">
            <summary>
            <para>Project Model settings root.</para>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.ProjectModelSettingsStorageMountPointPriorityClasses">
            <summary>
            Takes the standard <see cref="T:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses"/> and details them for project model specific storages.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStorage">
            <summary>
            Base for two per-project storages.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStorageComponent.AdviseProjectSettingChange(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.SettingsEntry,System.Action{JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStorageComponent.SettingsPerProject},System.Action{JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStorageComponent.SettingsPerProject})">
            <summary>
            Advises project setting changes
            </summary>
            <param name="lifetime">Lifetime of the subscription</param>
            <param name="settingsEntry">Settings entry which changes are observed</param>
            <param name="onprojectSettingsChanged">Handler to be called when project settings created or changed</param>
            <param name="lefetimeHandler">Optional handler to be called when project settings created to hook to its lifetime</param>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SolutionSettingsStoragePersonal">
            <summary>
            Per-solution storage excluded from SCC.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SolutionSettingsStorageShared">
            <summary>
            Per-solution storage to be checked in to SCC.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Store.SolutionSettings">
            <summary>
            Helpers for working with solution-specific settings layers.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.SolutionSettings.BindForWritingToSolutionShared">
            <summary>
            Binds <see cref="T:JetBrains.Application.Settings.Store.Implementation.SettingsStore"/> to the solution context so that writes were SmartSaved to the Solution Shared layer (affecting any higher-priority writable layers if they contain conflicting values).
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.SolutionSettings.SolutionSharedLayerId">
            <summary>
            <para>Identifies the Solution-Shared <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">user-friendly settings layer</see>.</para>
            <para>To get the layer, obtain or create a <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers"/> instance and ask it for the layer by its ID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.SolutionSettings.SolutionPersonalLayerId">
            <summary>
            <para>Identifies the Solution-Personal <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">user-friendly settings layer</see>.</para>
            <para>To get the layer, obtain or create a <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers"/> instance and ask it for the layer by its ID.</para>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Sharepoint.SharepointDeploymentType">
            <summary>
            Sharepoint depployment type property value
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.SolutionFileLocationLive">
            <summary>
            Tracks location of the solution's project file.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.SolutionFileLocationLive.SolutionFileLocation">
            <summary>
            Gets the location of the project file of the owning solution (if any).
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.SolutionFileParser.ISlnFile">
            <summary>
            Parsed content of an .sln file.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.SolutionFileParser.SlnFileProject">
            <summary>
            Project as it was parsed in the solution file.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.SolutionFileParser.SlnFileProject.myProjectLocation">
            <summary>
            Project URI as described in solution file...
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.SolutionFileParser.SlnFileProject.GetLocation">
            <summary>
            Project home directory for Web sites. Project file location for other project types.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.SolutionFileParser.SlnFileProject.SolutionFilePath">
            <summary>
            Path to owner solution file.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Impl.ProjectFileModificationCookie">
            <summary>
            A modification cookie for a set of documents that are project-file-based.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Impl.ProjectFileModificationCookie.ProjectFiles">
            <summary>
            Gets the set of project files involved in this modification.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElementPresenter.GetIcon(JetBrains.ProjectModel.IProjectModelElement)">
            <summary>
            Gets an icon for project model element
            </summary>
            <returns>Icon or null if unhandled by this presenter</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElementPresenter.GetPresentableLocation(JetBrains.ProjectModel.IProjectModelElement)">
            <summary>
            Gets presentable location for project model element.
            Used in Recent Files, Recent Edits, Go To File etc
            </summary>
            <returns>Presentable location for project model element or null if unhandled by this presenter</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IModuleReferenceResolveManager.RefreshAssemblyReferences(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly)">
            <summary>
            Resolves assembly references for all incoming resolve contexts
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectModelIcons">
            <summary>
            Collection of standard icons
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Assemblies.Impl.ModuleReferenceResolveManager.UpdateReferenceAndFire(JetBrains.ProjectModel.Model2.References.IModuleToAssemblyReference,JetBrains.Util.FileSystemPath)">
            <param name="reference">reference to be updated</param>
            <param name="resolveResult">might be non-existent file</param>
        </member>
        <member name="T:JetBrains.ProjectModel.BuildAction">
            <summary>
            Describes what happens with a project file during build
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.ProjectConfigurationEx.SetRelativeOutputDirectory(JetBrains.ProjectModel.Properties.IProjectConfiguration,System.String,JetBrains.Util.FileSystemPath)">
            <summary>
            Sets RelativeOutputDirectory to 
            </summary>
            <param name="configuration"></param>
            <param name="outputDirectory">OutputDirectory string that may represent either full path or relative</param>
            <param name="projectDirectory">Project location</param>
        </member>
        <member name="M:JetBrains.ProjectModel.FileSetSet.GetBasePaths">
            <summary>
            Returns the root directory of all include patterns
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly.IsMissing">
            <summary>
            Indicates that the persistent version of the assembly is not found
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.AssemblyInfoCache.GetAssemblyInfo(JetBrains.Util.FileSystemPath,System.String,System.Func{JetBrains.Util.FileSystemPath,System.String,JetBrains.Util.FileSystemPath},JetBrains.Util.FileSystemPath@)">
            <summary>
            Gets assembly info from cache. Use out parameter and combine func to reduce memory traffic.
            </summary>
            <param name="folderPath"></param>
            <param name="assemblyFileName"></param>
            <param name="combineFunc"> </param>
            <param name="fullAssemblyPath"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ProjectModel.Impl.ExternalChangeProcessor.myStatusBarIndicatorShouldBeVisible">
            <summary>
            Gets or sets whether the indicator should be visible. Shows or hides the indicator with a delay, to avoid flickering.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.ProjectReferenceExtension.GetReferencedName(JetBrains.ProjectModel.IProjectToProjectReference)">
            <summary>
            Returns name of the output assembly of a referenced project if is able to fetch. Null otherwise
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.ProjectReferenceExtension.GetReferencedName(JetBrains.ProjectModel.IProject)">
            <summary>
            Returns name of the output assembly of a referenced project if is able to fetch. Null otherwise
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Model2.Assemblies.Impl.Assembly">
            <summary>
            Represents loaded resolved assembly reference.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectFile">
            <summary>
            Represents a file in a project
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.MarkReconciledWithInMemoryVersion">
            <summary>
            Marks the file as reconciled, i.e. its persistent and in-memory version are identical, by assigning its external version timestamp the same value as of the in-memory version
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.MarkReconciledWithExternalVersion">
            <summary>
            Marks the file as reconciled, i.e. its persistent and in-memory version are identical, by assigning its in-memory version timestamp the same value as of the external version
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.CreateReadStream">
            <summary>
            Create new read-only stream for this file
            Don't forget to dispose it!
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.CreateWriteStream">
            <summary>
            Creates new writable stream for this file
            Don't forget to dispose it! 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.LanguageType">
            <summary>
            Language in which the file is written
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.LastInMemoryModificationStamp">
            <summary>
            Timestamp corresponding to the last in-memory modification
            </summary>
            <remarks>Equals to the LastExternalModificationStamp if the file has not been modified in memory</remarks>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.LastExternalModificationStamp">
            <summary>
            Timestamp corresponding to the last external modification
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.LastWriteTimeUtc">
            <summary>
            Time of last modification of the corresponding file on the file system.
            Note that this value is cached and is updated only when the synchronization with the file system is performed.
            That is, the value returned by this method may sometimes differ from the actual modification stamp of the physical file,
            if the file was modified since last synchronization with the file system.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.IsMissing">
            <summary>
            Checks if the persistent version of the file does not exist
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.HasChangedExternallySinceLastReconciliation">
            <summary>
            Indicates that the persistent version of the file has changed externally since the last reconciliation
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.HasChangedInMemorySinceLastReconciliation">
            <summary>
            Indicates that the in-memory version of the file has changed since the last reconciliation
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.Properties">
            <summary>
            Returns object for manipulating project file properties
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Impl.ProjectFileSynchronizer">
            <summary>
            Propagates changes made to the project tree into the project file
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Standalone.IProjectImporter.ImportSolution(JetBrains.ProjectModel.Impl.SolutionElement,JetBrains.Util.FileSystemPath)">
            <summary>
            Imports all projects from <see cref="!:solutionFilePath"/> into <see cref="!:solution"/>
            </summary>
            <param name="solution">Existing solution element. It may be already open or just created</param>
            <param name="solutionFilePath">Path to .sln file to import projects from</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ProjectModel.ISolution">
            <summary>
            Root project model element
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISolution.IsTemporary">
            <summary>Indicates if the solution has not been persisted</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionElement.GetSolutionSettingsStoragePath(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.SolutionFileLocationLive,JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Gets the full path for the solution settings storage file.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionElement.GetSolutionOrProjectLegacySettingsFileSuffix(JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Suffix for the solution settings file (the trailing extensions), scope-dependent, leading dot included.
            Usually, <c>".resharper.user"</c> and <c>".resharper"</c>
            </summary>
            <remarks>This is the legacy (pre-settings-storage) file.</remarks>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionElement.GetSolutionOrProjectSettingsStorageFileSuffix(JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Suffix for the solution/project settings storage file (the trailing extensions), scope-dependent, leading dot included.
            Usually, <c>".DotSettings.user"</c> and <c>".DotSettings"</c>
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.CreateSolution(JetBrains.Util.FileSystemPath)">
            <summary>
            Creates new empty instance of solution.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.OpenExistingSolution(JetBrains.Util.FileSystemPath)">
            <summary>
            Create instance of solution using specified solution file.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.ImportProjectsFromExistingSolution(JetBrains.ProjectModel.Impl.SolutionElement,JetBrains.Util.FileSystemPath,System.Boolean)">
            <summary>
            Imports projects from <see cref="!:solutionFilePath"/> into existing solution and removes old projects if requested by <see cref="!:doRemoveOldProjects"/>
            </summary>
            <param name="solution">Open solution</param>
            <param name="solutionFilePath">Path to solution file to import from</param>
            <param name="doRemoveOldProjects">Whether to remove project that existed before</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.CreateSolutionWithCustomProcess(JetBrains.Util.FileSystemPath,System.Action{JetBrains.ProjectModel.Impl.SolutionElement})">
            <summary>
            Create instance of solution using specified solution file.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.OpenExistingProject(JetBrains.ProjectModel.Impl.SolutionElement,JetBrains.Util.FileSystemPath)">
            <summary>
            Create and new project from project file and add it to a solution.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.GetNotLinkedSubFolder(JetBrains.ProjectModel.IProjectFolder,System.String)">
            <summary>
            Returns sub folder given the name. It could be only one without linked folders.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.GetSubFolders(JetBrains.ProjectModel.IProjectFolder,System.String)">
            <summary>
            Returns all sub folders given the name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.GetSubFiles(JetBrains.ProjectModel.IProjectFolder,System.String)">
            <summary>
            Returns all sub files given the name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.HasSubItems(JetBrains.ProjectModel.IProjectFolder,System.String)">
            <summary>
            Returns true if the folder has at least one subitem with given name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectModelElementPresenterAttribute.#ctor(System.Double)">
            <summary>
            <paramref name="priority"/> defines the order of presenters. Presenters are checked in descending order.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectModelElementPresenterAttribute.Priority">
            <summary>
            Priority defines the order of presenters. Presenters are checked in ascending order.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectModelElementEnvoy.Text">
            <summary>
            Gets presentation text for project item, as was last generated via <see cref="M:JetBrains.ProjectModel.ProjectModelElementEnvoy.Present``1(JetBrains.UI.TreeView.StructuredPresenter{``0,JetBrains.CommonControls.IPresentableItem},``0,JetBrains.CommonControls.IPresentableItem,JetBrains.UI.TreeView.PresentationState)"/>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectOutputType">
            <summary>
            Type of the output assembly according to C# compiler options
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectUtil.IsProjectFromUserView(JetBrains.ProjectModel.IProject)">
            <summary>
            Gets whether this <paramref name="project"/> is a project from the user's perspective, eg a project node in the Solution Explorer.
            This excludes the solution folders and fake projects introduced by R# project model to emulate the website queer things.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectUtil.GetProjectByFullPath(JetBrains.ProjectModel.ISolution,JetBrains.Util.FileSystemPath)">
            <summary>
            Looks up the project by its full path, which is either the project folder path or the project file path (not available for some project kinds). Throws if missing or ambiguous.
            </summary>
            <param name="solution">Owning solution.</param>
            <param name="path">Project location or project file location.</param>
            <returns>The project.</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectUtil.TryGetProjectByFullPath(JetBrains.ProjectModel.ISolution,JetBrains.Util.FileSystemPath)">
            <summary>
            Looks up the project by its full path, which is either the project folder path or the project file path (not available for some project kinds). <c>Null</c> if missing or ambiguous.
            </summary>
            <param name="solution">Owning solution.</param>
            <param name="path">Project location or project file location.</param>
            <returns>The project, or <c>Null</c>.</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.impl.SpecialFiles.SpecialFilesManager">
            <summary>
            Provides a reference-counter based mechanism for keeping non-project items
            </summary> 
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.Name">
            <summary>
            For regular folders Name equals to <see cref="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.Location"/>.Name
            If the folder is virtual, Name may differ
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.Location">
            <summary>
            Folder path.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.Items">
            <summary>
            Folder content
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.IsHidden">
            <summary>
            There're hidden folders in VS Hierarchy. 
            i.e. C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\kenticocms\cf18e726\9ae5a8e5\Sources_App_Code
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.AllowsNonExistence">
            <summary>
            Means that a folder can absent in file system (can be a virtual folder)
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.IProjectDescriptor.SetParentProjectPointer(JetBrains.ProjectModel.Update.IProjectPointer)">
            <summary>
            Allows to set parent project
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectDescriptor.Guid">
            <summary>
            Guid as specified in project file (or solution file in case of a website)
            Normally, all projects in solution have different GUIDs but if .csproj file is copy-pasted with only name changed,
            VS will create hierarchy items with equal GUIDs and will create different GUIDs only later while saving the solution
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectDescriptor.ProjectFilePath">
            <summary>
            Path to project file. May be empty if there's no project file (Misc files, Solution project, Solution folders, Websites)
            <see cref="P:JetBrains.ProjectModel.IProjectItem.Location"/> property contains project location. Location of a project. 
            If project file exists, <see cref="P:JetBrains.ProjectModel.IProjectItem.Location"/> must be a folder of <see cref="P:JetBrains.ProjectModel.Update.IProjectDescriptor.ProjectFilePath"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectDescriptor.ParentProjectPointer">
            <summary>
            Pointer to a parent project in case of a project nested to a solution folder. Maybe we get rid of the thingy in case we have an assumption, 
            that nested hierarchy element never appears prior to its parent.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectDescriptor.ProjectProperties">
            <summary>
            Project properties that define project's treatment (Solution folder/ C# project/ Website etc)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFileDescriptor.Location">
            <summary>
            Path to the project file. File is linked if its directory does not match to the parent folder location.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFileDescriptor.Properties">
            <summary>
            File properties. Null if no need to specify
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFileDescriptor.IsFileBeingEdited">
            <summary>
            Whether the file is open in the editor and modified. 
            Necessary to specify correct file timestamp
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectReferenceProperties.AutoReferenced">
            <summary>
            This property set tot TRUE when the references is added implicitely by Visual Studio
            see http://youtrack.jetbrains.com/issue/RSMSFT-37 for more details
            The only aspect affected by the property is whether the reference can be removed respecting NoStdLib property
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.SdkReferences.ProjectToSdkReferenceDescriptor.#ctor(JetBrains.Metadata.Reader.API.TargetFrameworkId,JetBrains.ProjectModel.References.Impl.SdkReferenceFactory,System.String,System.String)">
            <param name="sdkReferenceFactory"></param>
            <param name="sdkName">SDK Name</param>
            <param name="sdkManifestPath">path to a folder with the sdkmanifest.xml file</param>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_UPDATE_PROJECT_PROPERTIES">
            <summary>
            Update project properties
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_CREATE_MISSING_ITEMS">
            <summary>
            Creates project and missing items, does not remove anything
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_REMOVE_REDUNDANT_FILES_AND_FOLDERS">
            <summary>
            When project is being synchronized files and folders became redundant are removed. Nested projects are skipped.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_REMOVE_REDUNDANT_NESTED_PROJECTS">
            <summary>
            When project is being synchronized, nested projects that became redundant are removed
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_NOTIFY_CHANGE_MANGER">
            <summary>
            Change manager event is fired if the flag is on
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.CREATE_MISSING_ITEMS">
            <summary>
            Creates project and listed items only
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.ASL_STARTUP_SYNC">
            <summary>
            ASL startup synchronization. important not to turn on <see cref="F:JetBrains.ProjectModel.Update.UpdateFlags.F_REMOVE_REDUNDANT_NESTED_PROJECTS"/> because there are not loaded projects, 
            that would be removed otherwise
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.FULL_SYNC">
            <summary>
            Full project sync. Will remove nested projects, files and folders that became redundant
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.FULL_SYNC_NOTIFY_CHANGE_MANAGER">
            <summary>
            Full sync with change manager notification
            </summary>
        </member>
    </members>
</doc>
