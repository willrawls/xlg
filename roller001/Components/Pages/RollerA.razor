@page "/rollera"
@using Roller001.App_Code
@using MetX.Standard.Library.Encryption
@rendermode InteractiveServer

<style>
    @@media (max-width: 600px) {
        body {
            padding-right: 0 !important;
            padding-left: 0 !important;
        }
    }
    .nospacing {
        margin: 0 !important;
        padding: 0 !important;
    }
</style>

<PageTitle>Roller A</PageTitle>

<h1>Roller A</h1>

<div class="col-10 nospacing">
    <input type="checkbox" @bind="State.HasGiantStrength" @onclick="State.HasGiantStrength_Click" /> Have Giant strength?
    <input type="checkbox" @bind="State.HasHaste" @onclick="State.HasHaste_Click" /> Hasted?
    <input type="checkbox" @bind="State.HasBless" @onclick="State.HasBless_Click" /> Blessed?
    <input type="checkbox" @bind="State.HasBerserk" @onclick="State.HasBerserk_Click" /> Berserk?<br />
    THAC0: <input type="number" class="col-4" @bind="State.THAC0" />
    Target AC: <input type="number" class="col-4" @bind="State.TargetAc" />
</div>
<table class="table nospacing w-auto">
    <thead>
        <tr>
            <th>Weapon</th>
            <th>Attacks</th>
            <th>+To Hit</th>
            <th>Dice</th>
            <th></th>
            <th>Sides</th>
            <th>+Damage</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Hands</td>
            <td><input type="number" class="col-4"  @bind="State.HandsAttacks" /></td>
            <td><input type="number" class="col-4"  @bind="State.HandsToHit" /></td>
            <td><input type="number" class="col-4"  @bind="State.HandsDice" /></td>
            <td>D</td>
            <td><input type="number" class="col-4"  @bind="State.HandsSides" /></td>
            <td>+</td>
            <td><input type="number" class="col-4"  @bind="State.HandsPlus" /></td>
        </tr>
        <tr>
            <td>Cestis+3</td>
            <td><input type="number" class="col-4"  @bind="State.Cestis3Attacks" /></td>
            <td><input type="number" class="col-4"  @bind="State.Cestis3ToHit" /></td>
            <td><input type="number" class="col-4"  @bind="State.Cestis3Dice" /></td>
            <td>D</td>
            <td><input type="number" class="col-4"  @bind="State.Cestis3Sides" /></td>
            <td>+</td>
            <td><input type="number" class="col-4"  @bind="State.Cestis3Plus" /></td>
        </tr>
        <tr>
            <td>Cestis+2</td>
            <td><input type="number" class="col-4"  @bind="State.Cestis2Attacks" /></td>
            <td><input type="number" class="col-4"  @bind="State.Cestis2ToHit" /></td>
            <td><input type="number" class="col-4"  @bind="State.Cestis2Dice" /></td>
            <td>D</td>
            <td><input type="number" class="col-4"  @bind="State.Cestis2Sides" /></td>
            <td>+</td>
            <td><input type="number" class="col-4"  @bind="State.Cestis2Plus" /></td>
        </tr>
    </tbody>
</table>

<div class="table">
    <div class="row">
        <div class="col">Minimum damage is @State.MinimumDamage() when all attacks hit</div>
        <div class="col">Damage multiplier is @State.ShowDamageMultiplier()</div>
        <div class="col">Attacks multiplier is @State.ShowAttacksMultiplier()</div>
    </div>
</div>

<button class="btn btn-primary" @onclick="FullRoll">Roll</button>

<div class="table w-75">
    <div class="row">
        <div class="col border-1"><b>Weapon</b></div>
        <div class="col"><b>#</b></div>
        <div class="col"><b>Roll</b></div>
        <div class="col"><b>Damage</b></div>
    </div>
    @for (var i = 1; i < (State.HandsAttacks * State.AttacksMultiplier) + 1; i++)
    {
        <div class='row'>
            <div class='col'>Hands</div>
            <div class='col'>@i</div>
            <div class='col'>@State.RollD20(State, State.HandsToHit, out var rollState)</div>
            <div class='col'>@State.CalculateDamage(State.HandsDice, State.HandsSides, State.HandsPlus, rollState)</div>
            </div>
    }
    @for (var i = 1; i < (State.Cestis3Attacks * State.AttacksMultiplier) + 1; i++)
    {
        <div class='row'>
            <div class='col'>Cestis+3</div>
            <div class='col'>@i</div>
            <div class='col'>@State.RollD20(State, State.Cestis3ToHit, out var rollState)</div>
            <div class='col'>@State.CalculateDamage(State.Cestis3Dice, State.Cestis3Sides, State.Cestis3Plus, rollState)</div>
            </div>
    }
    @for (var i = 1; i < (State.Cestis2Attacks * State.AttacksMultiplier) + 1; i++)
    {
        <div class='row'>
            <div class='col'>Cestis+2</div>
            <div class='col'>@i</div>
            <div class='col'>@State.RollD20(State, State.Cestis2ToHit, out var rollState)</div>
            <div class='col'>@State.CalculateDamage(State.Cestis2Dice, State.Cestis2Sides, State.Cestis2Plus, rollState)</div>
            </div>
    }
    @for (var i = 1; i < (State.HandsAttacks * State.AttacksMultiplier) + 1; i++)
    {
        <div class='row'>
            <div class='col'>Bite</div>
            <div class='col'>@i</div>
            <div class='col'>@State.RollD20(State, 0, out var rollState)</div>
            <div class='col'>@State.CalculateDamage(1, 4, 0, rollState)</div>
            </div>
    }
</div>

<div class="table">
    @for (var i = 1; i < 21; i++)
    {
        <div class='row'>
            <div class='col'>@i</div>
            <div class='col'>@fairness.Number[i]</div>
        </div>
    }
</div>
<p>Fairness average: @fairness.Average() (should be around @(10000/20))</p>
<p>Fairness min: @fairness.Min()</p>
<p>Fairness max: @fairness.Max()</p>
@inject IWebHostEnvironment WebHostEnvironment

@code {
    public FairnessState fairness;

    protected override void OnInitialized()
    {
        fairness = new FairnessState();
        State = RollerAState.Load(RollerAStateFilePath);
    }

    public void FullRoll()
    {
        fairness = new FairnessState();
        State.Save(RollerAStateFilePath);
    }

    public static RollerAState State = null!;

    private static string? _rollerAStateFilePath;
    public string? RollerAStateFilePath
    {
        get
        {
            if (_rollerAStateFilePath != null) return _rollerAStateFilePath;

            var dataDirectory = Path.Combine(WebHostEnvironment.ContentRootPath, "App_Data");
            _rollerAStateFilePath = Path.Combine(dataDirectory, "RollerAState.json");
            return _rollerAStateFilePath;
        }
    }
}
